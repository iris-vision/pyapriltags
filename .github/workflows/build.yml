name: Build AprilTag

on:
  push:

jobs:
  build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [amd64, aarch64, armhf]
        exclude:
          - os: macos-latest
            arch: armhf
          - os: macos-latest
            arch: aarch64
          - os: windows-latest
            arch: armhf
          - os: windows-latest
            arch: aarch64

    env:
      COMMON_CMAKE_ARGS: "-DBUILD_SHARED_LIBS=ON -DCMAKE_C_COMPILER_WORKS=1 -DCMAKE_CXX_COMPILER_WORKS=1 -DCMAKE_BUILD_TYPE=Release"

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
    
    - name: Create directories
      run: |
        mkdir -p builds/${{ matrix.os }}_${{ matrix.arch }}
        mkdir -p dist/${{ matrix.os }}_${{ matrix.arch }}
        mkdir out
    
    - name: Install dependencies
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
      run: |
        sudo apt-get update || true
        sudo apt-get install -y gcc g++ cmake python3-pip
        if [ "${{ matrix.arch }}" == "aarch64" ] || [ "${{ matrix.arch }}" == "armhf" ]; then
          sudo apt-get install -y gcc-${{ matrix.arch }} g++-${{ matrix.arch }}
        fi
      if: matrix.os == 'windows-latest'
      run: |
        choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
        choco install mingw
    
    - name: Build Apriltag
      run: |
        do_compile() {
          printf "\n>>> BUILDING APRILTAG for $1\n"
          mkdir builds/$1
          cd builds/$1 || return
          cmake $4 \
              -DCMAKE_C_COMPILER=$2 -DCMAKE_CXX_COMPILER=$3 \
              $COMMON_CMAKE_ARGS ../../apriltag || return
          cmake --build . --config Release || return
          cp -L *.so* *.dll* *.dylib* ../../dist/$1
        }
        
        case "${{ matrix.os }}" in
        "ubuntu-latest")
          case "${{ matrix.arch }}" in
            "amd64") do_compile linux_amd64 gcc g++ "-DCMAKE_SYSTEM_NAME=Linux -DCMAKE_SYSTEM_PROCESSOR=x86_64";;
            "aarch64") do_compile linux_aarch64 aarch64-linux-gnu-gcc aarch64-linux-gnu-g++ "-DCMAKE_SYSTEM_NAME=Linux -DCMAKE_SYSTEM_PROCESSOR=arm";;
            "armhf") do_compile linux_armhf arm-linux-gnueabihf-gcc arm-linux-gnueabihf-g++ "-DCMAKE_SYSTEM_NAME=Linux -DCMAKE_SYSTEM_PROCESSOR=arm";;
          esac;;
        "macos-latest")
          case "${{ matrix.arch }}" in
            "amd64") do_compile mac_amd64 clang clang++ "-DCMAKE_SYSTEM_NAME=Darwin -DCMAKE_OSX_ARCHITECTURES=x86_64";;
          esac;;
        "windows-latest")
          do_compile win64 x86_64-w64-mingw32-gcc x86_64-w64-mingw32-g++ "-DCMAKE_SYSTEM_NAME=Windows";;
        esac
    
    - name: Build wheel
      run: |
        cp dist/${{ matrix.os }}_${{ matrix.arch }}/* pyapriltags/ || return
        ARCH_MAPPING={{
          "linux_amd64": "manylinux2010_x86_64",
          "linux_aarch64": "manylinux2014_aarch64",
          "linux_armhf": "manylinux2014_armv7l",
          "win64": "win-amd64",
          "mac_amd64": "macosx_11_0_x86_64"
        }}
        pip wheel --wheel-dir out --no-deps --build-option=--plat-name=${{fromJSON(ARCH_MAPPING)[matrix.os+'_'+matrix.arch]}} .
        rm -rf build/lib  # remove cached shared libraries
        rm pyapriltags/*
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: apriltag-wheels
        path: out
